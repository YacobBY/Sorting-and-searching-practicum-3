BinaryStdIn.readString()
s.toCharArray()
buildTrie(freq)
buildCode(st, root, "")
writeTrie(root)
BinaryStdOut.write(input.length)

code.charAt(j)
BinaryStdOut.write(false)
code.charAt(j)
BinaryStdOut.write(true)
throw new IllegalStateException("Illegal state")

BinaryStdOut.close()
pq.insert(new Node(i, freq[i], null, null))
pq.size()
pq.insert(new Node('\0', 0, null, null))
pq.insert(new Node('\1', 0, null, null))

pq.size()
pq.delMin()
pq.delMin()
new Node('\0', left.freq + right.freq, left, right)
pq.insert(parent)
pq.delMin()

x.isLeaf()
BinaryStdOut.write(true)
BinaryStdOut.write(x.ch, 8)
BinaryStdOut.write(false)
writeTrie(x.left)
writeTrie(x.right)

x.isLeaf()
buildCode(st, x.left, s + '0')
buildCode(st, x.right, s + '1')

Node root = readTrie()
BinaryStdIn.readInt()
x.isLeaf()
BinaryStdIn.readBoolean()
BinaryStdOut.write(x.ch, 8)
BinaryStdOut.close()

BinaryStdIn.readBoolean()
new Node(BinaryStdIn.readChar(), -1, null, null)
new Node('\0', -1, readTrie(), readTrie())

args[0].equals("-")
compress()
args[0].equals("+")
expand()
throw new IllegalArgumentException("Illegal command line argument")




